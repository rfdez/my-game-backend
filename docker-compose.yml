---
version: '3.8'

x-app:
  &default-app
  depends_on:
    - db
  environment:
    &default-env
    DB_USER: ${DB_USER}
    DB_PASS: ${DB_PASS}
    DB_HOST: ${DB_HOST}
    DB_PORT: ${DB_PORT}
    DB_NAME: ${DB_NAME}
    DB_PARAMS: ${DB_PARAMS}
  networks:
    - my-game-net
  restart: on-failure

services:
  app:
    <<: *default-app
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my-game-prod
    environment:
      <<: *default-env
      GIN_MODE: release
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:8080/health || exit 1
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    image: rfdez/my-game:latest
    ports:
      - '8080:8080'
  dev-app:
    <<: *default-app
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: my-game-dev
    cap_add:
      - SYS_PTRACE
    image: rfdez/my-game:dev
    ports:
      - '8080:8080'
      - '2345:2345'
    security_opt:
      - "seccomp:unconfined"
    volumes:
      - .:/app:rw,delegated
  db:
    container_name: my-game-db
    environment:
      POSTGRES_USER: '${DB_USER}'
      POSTGRES_PASSWORD: '${DB_PASS}'
      POSTGRES_DB: '${DB_NAME}'
    expose:
      - '5432'
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready || exit 1
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    image: 'postgres:14.2-alpine'
    networks:
      - my-game-net
    restart: on-failure
    volumes:
      - 'my-game-data:/var/lib/postgresql/data'
      - './sql/:/docker-entrypoint-initdb.d'

volumes:
  my-game-data:
    driver: local
    name: my-game-data
networks:
  my-game-net:
    driver: bridge
    name: my-game-net
